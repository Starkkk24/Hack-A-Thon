def create_database():
    # Connect to SQLite (it will create the database file if it doesn't exist)
    conn = sqlite3.connect('user.db')
    
    # Create a cursor object to interact with the database
    cursor = conn.cursor()
    # Create table with user_id, user_name, dept, and code columns
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS sub (
        id TEXT PRIMARY KEY,
        user_id TEXT NOT NULL,
        name TEXT NOT NULL,
        dept TEXT NOT NULL,
        code TEXT NOT NULL,
        under TEXT NOT NULL
    );
    ''')
     
    # Commit the transaction and close the connection
    conn.commit()
    conn.close()
    print("done2")

# Call the function to create the database and table
# create_database()





def set():

    # Connect to the SQLite3 database (creates the file if it doesn't exist)
    connection = sqlite3.connect("user.db")

    # Create a cursor object
    cursor = connection.cursor()

    # SQL query to add a column named 'age' to the table 'main'
    alter_table_query = """
    ALTER TABLE main
    ADD COLUMN loc TEXT;
    """

    try:
        # Execute the query
        cursor.execute(alter_table_query)
        print("Column 'age' added successfully!")
    except sqlite3.OperationalError as e:
        print(f"Error: {e}")

    # Commit the changes and close the connection
    connection.commit()
    connection.close()

set()






@app2_bp.route('/cre')
def db():

    # Connect to SQLite database (or create it if it doesn't exist)
    conn = sqlite3.connect("items_database.db")

    # Create a cursor object to interact with the database
    cursor = conn.cursor()

    # Create the 'items' table
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS items (
        id TEXT PRIMARY KEY AUTOINCREMENT, -- Auto-incrementing ID
        name TEXT NOT NULL,                   -- Name of the item (required)
        weight REAL,                          -- Weight of the item
        price REAL,                           -- Price of the item
        grid TEXT,                            -- Grid information
        can TEXT,                             -- Can field
        cnot TEXT,                            -- Cannot field
        des TEXT,                             -- Description
        date TEXT,                            -- Date
        status TEXT,                          -- Status of the item
        under TEXT                            -- Under field
    )
    ''')

    # Commit changes to the database
    conn.commit()

    # Close the connection
    conn.close()

    print("Database and table 'items' created successfully.")
    return "finished"
